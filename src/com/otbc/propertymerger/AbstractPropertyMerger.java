package com.otbc.propertymerger;


import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.DirectoryScanner;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.types.FileSet;

public abstract class AbstractPropertyMerger extends Task implements PropertyMerger {
	
	public static final String TASK_NAME="propertymerger: ";
	
	private File baseFile;
	
	private File overrideFile;
	
	private File destFile;
	
	private Vector<FileSet> fileSets = new Vector<FileSet>();
	
	private Vector<File> propertyFiles;
	
	
	public Vector<File> getPropertyFiles() {
		return propertyFiles;
	}

	public void setPropertyFiles(Vector<File> files) {
		this.propertyFiles = files;
	}

	Vector<File> loadFiles(Vector<FileSet> fileSets)
			throws BuildException {
		Vector<File> files = new Vector<File>();
		
		for (FileSet fileSet : fileSets) {
			DirectoryScanner ds = fileSet.getDirectoryScanner(getProject());
			String[] includedFiles = ds.getIncludedFiles();
			List<String> asList = Arrays.asList(includedFiles);
			
			Collections.sort(asList,String.CASE_INSENSITIVE_ORDER);
			includedFiles= (String[]) asList.toArray();
			
			for (String file : includedFiles) {
				
				File base = ds.getBasedir();
				File e = new File(base, file);
				files.add(e);
				
			     getProject().log(TASK_NAME + "Including "+ e.getAbsolutePath(), Project.MSG_VERBOSE);
				
			}
		}
		if (getOverrideFile() != null && getOverrideFile().canRead()) {
			files.add(0, getOverrideFile());
		}

		if (getBaseFile() != null && getBaseFile().canRead()) {
			files.add(0, getBaseFile());
		}
		return files;
	}
	
	public void execute() throws BuildException {
		checkPreconditions();
		
		propertyFiles = loadFiles(getFileSets());
		mergeProperties();
		String comment = "This file was automatically generated by merging the files below and updating values in descending order.\n";
		comment = comment + "NOTE: This file should not be manually changed!\n";
		comment = comment + listFiles();
		writeFile(comment);

	}
	
	
	private void checkPreconditions() {
		if(destFile==null){
			throw new BuildException("destfile must be set");
		}
	}
	private String listFiles() throws BuildException {
		String fileList = "";
		for (File file : propertyFiles) {
			String fileName;
			try {
				fileName = file.getCanonicalPath().replace('\\', '/');
			} catch (IOException e) {
				throw new BuildException(e);
			}
			fileList = fileList + fileName + "\n";
		}
		return fileList;
	}

	public File getBaseFile() {
		return baseFile;
	}


	public File getOverrideFile() {
		return overrideFile;
	}


	public File getDestFile() {
		return destFile;
	}


	public Vector<FileSet> getFileSets() {
		return fileSets;
	}


	public void addFileset(FileSet fileset) {
		fileSets.add(fileset);
	}
	

	public void setBaseFile(final File file) {
		baseFile = file;
	}

	public void setOverrideFile(final File file) {
		overrideFile = file;
	}


	public void setDestFile(final File file) {
		destFile = file;
	}
}
